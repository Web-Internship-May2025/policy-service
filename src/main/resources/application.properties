spring.config.import=optional:classpath:database.properties,optional:classpath:secret.properties
spring.application.name=policy-service
server.port=8082
server.servlet.context-path=/policies

spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:mysql://localhost:3306/policy_service?createDatabaseIfNotExist=true&useSSL=false&serverTimezone=UTC}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.username=root
spring.datasource.password=\${DATABASE_PASSWORD}
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=create
spring.jpa.defer-datasource-initialization=true
spring.sql.init.mode=always
spring.sql.init.data-locations=classpath:data.sql

eureka.client.service-url.defaultZone=${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:http://localhost:8761/eureka}
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.instance.hostname=localhost

springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.path=/swagger-ui.html

# === KAFKA CONFIGURATION ===
# Bootstrap servers (point this at the port you exposed in docker-compose)
spring.kafka.bootstrap-servers=localhost:9092

# Producer: send JSON events
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# Consumer: read JSON events
spring.kafka.consumer.group-id=policy-service-group
#spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# allow your event classes to be deserialized
spring.kafka.consumer.properties.spring.json.trusted.packages=*

spring.profiles.active=local
spring.cloud.discovery.enabled=true
spring.jackson.serialization.FAIL_ON_EMPTY_BEANS=false
